/*
 Find the Difference

You are given two strings s and t.

String t is generated by random shuffling string s and then add one more letter at a random position.

Return the letter that was added to t.

 

Example 1:

Input: s = "abcd", t = "abcde"
Output: "e"
Explanation: 'e' is the letter that was added.
Example 2:

Input: s = "", t = "y"
Output: "y"
 

Constraints:

0 <= s.length <= 1000
t.length == s.length + 1
s and t consist of lowercase English letters.
*/

class Solution {
    public char findTheDifference(String s, String t) {
        char result = 0;

        // XOR all characters in string s
        for (char c : s.toCharArray()) {
            result ^= c;
        }

        // XOR all characters in string t
        for (char c : t.toCharArray()) {
            result ^= c;
        }

        // The result will be the added character
        return result;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();

        // Example 1
        String s1 = "abcd";
        String t1 = "abcde";
        System.out.println(solution.findTheDifference(s1, t1)); // Expected Output: 'e'

        // Example 2
        String s2 = "";
        String t2 = "y";
        System.out.println(solution.findTheDifference(s2, t2)); // Expected Output: 'y'
    }
}

/*
Explanation:
Initialization:

Initialize a variable result to 0. This will be used to store the XOR result of all characters.

XOR Characters in s:

XOR each character in the string s with result.

XOR Characters in t:

XOR each character in the string t with result.

Result:

After XOR-ing all characters, the remaining value in result will be the extra character that was added to t.

Why XOR?
Properties of XOR: XOR-ing a number with itself cancels out (e.g., a ^ a = 0), and XOR-ing a number with 0 is the number itself (e.g., a ^ 0 = a).

Application: By XOR-ing all characters in both strings, paired characters will cancel out, leaving the added character.

*/
